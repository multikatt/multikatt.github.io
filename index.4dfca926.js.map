{"mappings":"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","sources":["src/Block.ts","src/Board.ts","src/Tetromino_data.ts","src/Tetromino.ts","src/App.ts","src/Game.ts"],"sourcesContent":["export default class Block {\n  border_block: boolean = false;\n  size = 20;\n  margin = 2;\n\n  constructor(\n    public pos: { x: number; y: number },\n    public color: string,\n    border_block?: boolean\n  ) {\n    if (border_block) this.border_block = border_block;\n  }\n}\n","import Tetromino from \"./Tetromino\";\nimport Block from \"./Block\";\n\nexport default class Board {\n  active_tetromino: Tetromino;\n\n  constructor(public occupied_blocks: Block[] = []) {}\n\n  add_to_occupied_blocks(tetro: Tetromino) {\n    tetro.blocks.forEach((block) => {\n      this.occupied_blocks.push(block);\n    });\n  }\n}\n","export let rotation_tests = {\n  nonI: {\n    0: {\n      1: [\n        [0, 0],\n        [-1, 0],\n        [-1, -1],\n        [0, 2],\n        [-1, 2],\n      ],\n      3: [\n        [0, 0],\n        [1, 0],\n        [1, -1],\n        [0, 2],\n        [1, 2],\n      ],\n    },\n    1: {\n      0: [\n        [0, 0],\n        [1, 0],\n        [1, 1],\n        [0, -2],\n        [1, -2],\n      ],\n      2: [\n        [0, 0],\n        [1, 0],\n        [1, 1],\n        [0, -2],\n        [1, -2],\n      ],\n    },\n    2: {\n      1: [\n        [0, 0],\n        [-1, 0],\n        [-1, -1],\n        [0, 2],\n        [-1, 2],\n      ],\n      3: [\n        [0, 0],\n        [1, 0],\n        [1, -1],\n        [0, 2],\n        [1, 2],\n      ],\n    },\n    3: {\n      2: [\n        [0, 0],\n        [-1, 0],\n        [-1, 1],\n        [0, -2],\n        [-1, -2],\n      ],\n      0: [\n        [0, 0],\n        [-1, 0],\n        [-1, 1],\n        [0, -2],\n        [-1, -2],\n      ],\n    },\n  },\n  I: {\n    0: {\n      1: [\n        [0, 0],\n        [-2, 0],\n        [1, 0],\n        [-2, -1],\n        [1, -2],\n      ],\n      3: [\n        [0, 0],\n        [-1, 0],\n        [2, 0],\n        [-1, -2],\n        [2, 1],\n      ],\n    },\n    1: {\n      0: [\n        [0, 0],\n        [2, 0],\n        [-1, 0],\n        [2, -1],\n        [-1, 2],\n      ],\n      2: [\n        [0, 0],\n        [-1, 0],\n        [2, 0],\n        [-1, 2],\n        [2, 1],\n      ],\n    },\n    2: {\n      1: [\n        [0, 0],\n        [1, 0],\n        [-2, 0],\n        [1, 2],\n        [-2, -1],\n      ],\n      3: [\n        [0, 0],\n        [2, 0],\n        [-1, 0],\n        [2, -1],\n        [-1, 2],\n      ],\n    },\n    3: {\n      2: [\n        [0, 0],\n        [-2, 0],\n        [1, 0],\n        [-2, 1],\n        [1, -2],\n      ],\n      0: [\n        [0, 0],\n        [1, 0],\n        [-2, 0],\n        [1, 2],\n        [-2, -1],\n      ],\n    },\n  },\n};\n\nexport let shape_data = {\n  I: {\n    shape: [\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n    color: \"#0DDCE5\",\n  },\n  J: {\n    shape: [\n      [1, 0, 0, 0],\n      [1, 1, 1, 0],\n      [0, 0, 0, 0],\n    ],\n    color: \"#1F77F7\",\n  },\n  L: {\n    shape: [\n      [0, 0, 1, 0],\n      [1, 1, 1, 0],\n      [0, 0, 0, 0],\n    ],\n    color: \"#E9800F\",\n  },\n  O: {\n    shape: [\n      [1, 1],\n      [1, 1],\n    ],\n    color: \"#F9EC23\",\n  },\n  S: {\n    shape: [\n      [0, 1, 1, 0],\n      [1, 1, 0, 0],\n      [0, 0, 0, 0],\n    ],\n    color: \"#01D705\",\n  },\n  T: {\n    shape: [\n      [0, 1, 0, 0],\n      [1, 1, 1, 0],\n      [0, 0, 0, 0],\n    ],\n    color: \"#FC59FE\",\n  },\n  Z: {\n    shape: [\n      [1, 1, 0, 0],\n      [0, 1, 1, 0],\n      [0, 0, 0, 0],\n    ],\n    color: \"#E83B40\",\n  },\n};\n","import Block from \"./Block\";\nimport { shape_data, rotation_tests } from \"./Tetromino_data\";\n\nexport default class Tetromino {\n  shape: number[][];\n  color: string;\n  blocks: Block[];\n  type: string;\n  rotation_state = 0;\n  pos_x = 4;\n  pos_y = 1;\n\n  get_random_tetro() {\n    let shapes = [\"I\", \"J\", \"L\", \"O\", \"S\", \"T\", \"Z\"];\n    return shapes[Math.floor(Math.random() * shapes.length)];\n  }\n\n  constructor(type?: string) {\n    if (!type) {\n      type = this.get_random_tetro();\n    }\n    this.shape = shape_data[type].shape;\n    this.color = shape_data[type].color;\n    this.type = type;\n  }\n\n  update_tetromino() {\n    this.blocks = [];\n    this.shape.forEach((row, irow) => {\n      row.forEach((col, icol) => {\n        if (col === 1)\n          this.blocks.push(\n            new Block(\n              { x: this.pos_x + icol, y: this.pos_y + irow },\n              this.color\n            )\n          );\n      });\n    });\n  }\n\n  move(dir: \"left\" | \"right\" | \"down\") {\n    if (dir == \"left\") {\n      this.pos_x -= 1;\n    }\n    if (dir == \"right\") {\n      this.pos_x += 1;\n    }\n    if (dir == \"down\") {\n      this.pos_y += 1;\n    }\n    this.update_tetromino();\n  }\n\n  rotate(dir: \"left\" | \"right\" = \"right\", occupied_blocks?: Block[]) {\n    let check_collision = (wanted_state: number, tmp_shape: number[][]) => {\n      let found_solution = null;\n      let testtype: string;\n      if (this.type == \"I\") testtype = \"I\";\n      else testtype = \"nonI\";\n      rotation_tests[testtype][this.rotation_state][wanted_state].some(\n        (rot: number[]) => {\n          let found_hit = false;\n          tmp_shape.forEach((row, irow) => {\n            row.forEach((block, iblock) => {\n              if (block === 1) {\n                let blockpos = {\n                  x: iblock + this.pos_x,\n                  y: irow + this.pos_y,\n                };\n\n                if (\n                  occupied_blocks.find(\n                    (b) =>\n                      b.pos.x == blockpos.x + rot[0] &&\n                      b.pos.y == blockpos.y + rot[1]\n                  ) != null\n                ) {\n                  found_hit = true;\n                }\n              }\n            });\n          });\n          if (found_hit == false) {\n            found_solution = rot;\n            return true;\n          }\n        }\n      );\n\n      if (found_solution) return found_solution;\n      else return false;\n    };\n\n    let wanted_state: number;\n    let tmp_shape: number[][];\n\n    if (dir == \"left\") {\n      wanted_state = (this.rotation_state + 3) % 4;\n      tmp_shape = this.shape.map((_x, i, s) => s.map((y) => y[i])).reverse();\n    }\n    if (dir == \"right\") {\n      wanted_state = (this.rotation_state + 1) % 4;\n      tmp_shape = this.shape.reverse().map((_x, i, s) => s.map((_y) => _y[i]));\n    }\n    let found_solution = check_collision(wanted_state, tmp_shape);\n    if (found_solution != false) {\n      this.pos_x += found_solution[0];\n      this.pos_y += found_solution[1];\n      this.shape = tmp_shape;\n      this.rotation_state = wanted_state;\n    }\n    this.update_tetromino();\n  }\n}\n","import Game from \"./Game\";\n\nconst game = new Game();\ngame.start();\n","import Block from \"./Block\";\nimport Board from \"./Board\";\nimport Tetromino from \"./Tetromino\";\n\nexport default class Game {\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n  prev_time: DOMHighResTimeStamp;\n  tetrominos: Tetromino[];\n  board: Board;\n  speed = 250;\n  size = { w: 12, h: 22 };\n  game_state: \"running\" | \"stopped\" = \"running\";\n\n  constructor() {\n    this.canvas = document.getElementById(\"Game\") as HTMLCanvasElement;\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.prev_time = 0;\n    this.board = new Board();\n    this.create_border(this.size.w, this.size.h);\n  }\n\n  start() {\n    window.requestAnimationFrame(this.update);\n    const tetro = new Tetromino();\n    tetro.update_tetromino();\n    this.board.active_tetromino = tetro;\n    this.draw_game();\n    this.input();\n  }\n\n  update = (timestamp: DOMHighResTimeStamp) => {\n    let elapsed = timestamp - this.prev_time;\n    if (elapsed > this.speed) {\n      this.prev_time = timestamp;\n      if (this.check_collision(\"down\")) {\n        this.board.active_tetromino.move(\"down\");\n      } else {\n        if (this.board.active_tetromino.pos_y === 1) {\n          this.game_state = \"stopped\";\n        } else {\n          if (!this.contains_full_rows()) {\n            this.board.add_to_occupied_blocks(this.board.active_tetromino);\n          }\n          const tetro = new Tetromino();\n          tetro.update_tetromino();\n          this.board.active_tetromino = tetro;\n        }\n      }\n      this.draw_game();\n    }\n    if (this.game_state === \"running\")\n      window.requestAnimationFrame(this.update);\n  };\n\n  create_border(width: number, height: number) {\n    for (let ix = 0; ix < width; ix++) {\n      for (let iy = 0; iy < height; iy++) {\n        if (iy == 0 || iy == height - 1 || ix == 0 || ix == width - 1) {\n          this.board.occupied_blocks.push(\n            new Block({ x: ix, y: iy }, \"grey\", true)\n          );\n        }\n      }\n    }\n  }\n\n  contains_full_rows(): boolean {\n    let full_rows: number[] = [];\n\n    // filter out one block per row:\n    let single_block_per_row = this.board.active_tetromino.blocks.filter(\n      (b, i, o) => o.map((b) => b.pos.y).indexOf(b.pos.y) == i\n    );\n\n    // check the single block for each row:\n    single_block_per_row.forEach((block) => {\n      // count number of blocks occupied by current tetro on current row\n      let current_t = this.board.active_tetromino.blocks.filter(\n        (t) => t.pos.y === block.pos.y\n      );\n\n      // count number of other blocks\n      let current_row = this.board.occupied_blocks.filter(\n        (bb) => bb.pos.y == block.pos.y\n      );\n\n      let full_row = current_t.length + current_row.length == this.size.w;\n\n      if (full_row) {\n        full_rows.push(block.pos.y);\n      }\n    });\n\n    if (full_rows.length > 0) {\n      // add current tetro so that blocks not on a full row doesn't disappear\n      this.board.add_to_occupied_blocks(this.board.active_tetromino);\n\n      // filter out full rows\n      full_rows.forEach((r) => {\n        this.board.occupied_blocks = this.board.occupied_blocks.filter(\n          (b) => b.pos.y != r || b.border_block == true\n        );\n        this.board.occupied_blocks\n          .filter((b) => b.pos.y < r && b.border_block == false)\n          .forEach((b) => {\n            b.pos.y += 1;\n          });\n      });\n      return true;\n    }\n\n    return false;\n  }\n\n  check_collision(dir: \"down\" | \"left\" | \"right\"): boolean {\n    let current_t = this.board.active_tetromino;\n    let can_move = true;\n    let can_move_down = (blockpos: { x: number; y: number }): boolean => {\n      this.board.occupied_blocks.forEach((b) => {\n        if (b.pos.x == blockpos.x && b.pos.y == blockpos.y + 1) {\n          can_move = false;\n        }\n      });\n      return can_move;\n    };\n\n    let can_move_sideways = (\n      blockpos: { x: number; y: number },\n      dir: \"left\" | \"right\"\n    ): boolean => {\n      this.board.occupied_blocks.forEach((b) => {\n        if (dir == \"left\") {\n          if (b.pos.y == blockpos.y && b.pos.x == blockpos.x - 1) {\n            can_move = false;\n          }\n        } else if (dir == \"right\") {\n          if (b.pos.y == blockpos.y && b.pos.x == blockpos.x + 1) {\n            can_move = false;\n          }\n        }\n      });\n\n      return can_move;\n    };\n\n    current_t.shape.forEach((row, irow) => {\n      row.forEach((block, iblock) => {\n        if (block === 1) {\n          let blockpos = {\n            x: iblock + current_t.pos_x,\n            y: irow + current_t.pos_y,\n          };\n\n          if (dir == \"left\" && !can_move_sideways(blockpos, \"left\")) {\n            can_move = false;\n          } else if (dir == \"right\" && !can_move_sideways(blockpos, \"right\")) {\n            can_move = false;\n          } else if (dir == \"down\" && !can_move_down(blockpos)) {\n            can_move = false;\n          }\n        }\n      });\n    });\n    return can_move;\n  }\n\n  draw_game() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.draw_tetrominos();\n  }\n\n  draw_tetrominos() {\n    this.board.active_tetromino.blocks.forEach((b) => this.draw_block(b));\n    this.board.occupied_blocks.forEach((b) => this.draw_block(b));\n  }\n\n  draw_block(block: Block) {\n    this.ctx.fillStyle = block.color;\n    this.ctx.fillRect(\n      block.pos.x * (block.size + block.margin),\n      block.pos.y * (block.size + block.margin),\n      block.size,\n      block.size\n    );\n  }\n\n  input() {\n    window.addEventListener(\"keyup\", (key) => {\n      if (this.game_state == \"running\") {\n        switch (key.code) {\n          case \"ArrowLeft\":\n            if (this.check_collision(\"left\"))\n              this.board.active_tetromino.move(\"left\");\n            this.draw_game();\n            break;\n          case \"ArrowRight\":\n            if (this.check_collision(\"right\"))\n              this.board.active_tetromino.move(\"right\");\n            this.draw_game();\n            break;\n          case \"Space\":\n          case \"ArrowUp\":\n          case \"KeyX\":\n            this.board.active_tetromino.rotate(\n              \"right\",\n              this.board.occupied_blocks\n            );\n            this.draw_game();\n            break;\n          case \"KeyZ\":\n            this.board.active_tetromino.rotate(\n              \"left\",\n              this.board.occupied_blocks\n            );\n            this.draw_game();\n            break;\n          case \"ArrowDown\":\n            while (this.check_collision(\"down\"))\n              this.board.active_tetromino.move(\"down\");\n            this.draw_game();\n            break;\n          default:\n            break;\n        }\n      }\n    });\n  }\n}\n"],"names":["$0ac5b32afab23ecb$export$2e2bcd8739ae039","pos","color","border_block","this","size","margin","$1b0340a8652ca717$export$2e2bcd8739ae039","occupied_blocks","add_to_occupied_blocks","tetro","blocks","forEach","block","push","$204a7b54b1302ed3$export$65ebdd9423950068","nonI","I","$204a7b54b1302ed3$export$82ed93702dcb4c52","shape","J","L","O","S","T","Z","$7b052a5a6b818c76$export$2e2bcd8739ae039","get_random_tetro","shapes","Math","floor","random","length","type","rotation_state","pos_x","pos_y","update_tetromino","row","irow","col","icol","x","y","move","dir","rotate","wanted_state","tmp_shape","map","_x","i","s","reverse","_y","found_solution","testtype","some","rot","found_hit","iblock","blockpos","find","b","check_collision","speed","w","h","game_state","update","timestamp","prev_time","board","active_tetromino","contains_full_rows","draw_game","window","requestAnimationFrame","canvas","document","getElementById","ctx","getContext","create_border","start","input","width","height","ix","iy","full_rows","filter","o","indexOf","current_t","t","current_row","bb","r","can_move","can_move_down","can_move_sideways","clearRect","draw_tetrominos","draw_block","fillStyle","fillRect","addEventListener","key","code"],"version":3,"file":"index.4dfca926.js.map"}