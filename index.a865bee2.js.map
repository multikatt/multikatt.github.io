{"mappings":"MAAqBA,cAIAC,EAAsCC,QAAtCD,IAAAA,OAAsCC,MAAAA,EAJ5CC,KACbC,KAAO,GADMD,KAEbE,OAAS,SCCUC,cAGAC,EAA2B,SAA3BA,gBAAAA,EAEnBC,uBAAuBC,GACrBA,EAAMC,OAAOC,SAASC,IACpBT,KAAKI,gBAAgBM,KAAKD,WCiDhCE,EA3DY,CACVC,EAAI,CACFC,MAAO,CACL,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAEZd,MAAO,WAETe,EAAG,CACDD,MAAO,CACL,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAEZd,MAAO,WAETgB,EAAG,CACDF,MAAO,CACL,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAEZd,MAAO,WAETiB,EAAG,CACDH,MAAO,CACL,CAAC,EAAG,GACJ,CAAC,EAAG,IAENd,MAAO,WAETkB,EAAG,CACDJ,MAAO,CACL,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAEZd,MAAO,WAETmB,EAAG,CACDL,MAAO,CACL,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAEZd,MAAO,WAEToB,EAAG,CACDN,MAAO,CACL,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAEZd,MAAO,kBCpDUqB,EAOnBC,mBACE,IAAIC,EAAS,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC5C,OAAOA,EAAOC,KAAKC,MAAMD,KAAKE,SAAWH,EAAOI,qBAGtCC,GAZC3B,KAIb4B,MAAQ,EAJK5B,KAKb6B,MAAQ,EAQDF,IACHA,EAAO3B,KAAKqB,oBAEdrB,KAAKa,MAAQF,EAAOgB,GAAMd,MAC1Bb,KAAKD,MAAQY,EAAOgB,GAAM5B,MAG5B+B,mBACE9B,KAAKO,OAAS,GACdP,KAAKa,MAAML,SAAO,CAAEuB,EAAKC,KACvBD,EAAIvB,SAAO,CAAEyB,EAAKC,KACJ,IAARD,GACFjC,KAAKO,OAAOG,KACV,IAAIb,EACF,CAAEsC,EAAGnC,KAAK4B,MAAQM,EAAME,EAAGpC,KAAK6B,MAAQG,GACxChC,KAAKD,cAOjBsC,KAAKC,GACQ,QAAPA,IACFtC,KAAK4B,OAAS,GAEL,SAAPU,IACFtC,KAAK4B,OAAS,GAEL,QAAPU,IACFtC,KAAK6B,OAAS,GAEhB7B,KAAK8B,mBAGPS,OAAOD,EAAwB,SAClB,QAAPA,IACFtC,KAAKa,MAAQb,KAAKa,MAAM2B,KAAG,CAAEC,EAAIC,EAAGC,IAAMA,EAAEH,KAAKJ,GAAMA,EAAEM,OAAKE,WAErD,SAAPN,IACFtC,KAAKa,MAAQb,KAAKa,MAAM+B,UAAUJ,KAAG,CAAEC,EAAIC,EAAGC,IAAMA,EAAEH,KAAKK,GAAOA,EAAGH,QAEvE1C,KAAK8B,qBCxDI,wBCEE9B,KAOb8C,MAAQ,IAPK9C,KAQbC,KAAO,CAAE8C,EAAG,GAAIC,EAAG,IARNhD,KASbiD,WAAoC,UATvBjD,KA6BbkD,OAAUC,IAER,GADcA,EAAYnD,KAAKoD,UACjBpD,KAAK8C,MAAO,CAExB,GADA9C,KAAKoD,UAAYD,EACbnD,KAAKqD,gBAAgB,QACvBrD,KAAKsD,MAAMC,iBAAiBlB,KAAK,aAEjC,GAA0C,IAAtCrC,KAAKsD,MAAMC,iBAAiB1B,MAC9B7B,KAAKiD,WAAa,cACb,CACAjD,KAAKwD,sBACRxD,KAAKsD,MAAMjD,uBAAuBL,KAAKsD,MAAMC,kBAE/C,MAAMjD,EAAQ,IAAIc,EAClBd,EAAMwB,mBACN9B,KAAKsD,MAAMC,iBAAmBjD,EAGlCN,KAAKyD,YAEiB,YAApBzD,KAAKiD,YACPS,OAAOC,sBAAsB3D,KAAKkD,SAtCpClD,KAAK4D,OAASC,SAASC,eAAe,QACtC9D,KAAK+D,IAAM/D,KAAK4D,OAAOI,WAAW,MAClChE,KAAKoD,UAAY,EACjBpD,KAAKiE,cAAgB,GACrBjE,KAAKkE,cAAclE,KAAKC,KAAK8C,EAAG/C,KAAKC,KAAK+C,GAC1ChD,KAAKsD,MAAQ,IAAInD,EAGnBgE,QACET,OAAOC,sBAAsB3D,KAAKkD,QAClC,MAAM5C,EAAQ,IAAIc,EAClBd,EAAMwB,mBACN9B,KAAKsD,MAAMC,iBAAmBjD,EAC9BN,KAAKyD,YACLzD,KAAKoE,QA2BPF,cAAcG,EAAeC,GAC3B,IAAK,IAAIC,EAAK,EAAGA,EAAKF,EAAOE,IAC3B,IAAK,IAAIC,EAAK,EAAGA,EAAKF,EAAQE,IAClB,GAANA,GAAWA,GAAMF,EAAS,GAAW,GAANC,GAAWA,GAAMF,EAAQ,GAC1DrE,KAAKiE,cAAcvD,KAAK,IAAIb,EAAM,CAAEsC,EAAGoC,EAAInC,EAAGoC,GAAM,SAM5DhB,qBACE,IAAIiB,EAAsB,GA0B1B,OAvB2BzE,KAAKsD,MAAMC,iBAAiBhD,OAAOmE,QAAM,CACjEC,EAAGjC,EAAGkC,IAAMA,EAAEpC,KAAKmC,GAAMA,EAAE7E,IAAIsC,IAAGyC,QAAQF,EAAE7E,IAAIsC,IAAMM,IAIpClC,SAASC,IAE5B,IAAIqE,EAAY9E,KAAKsD,MAAMC,iBAAiBhD,OAAOmE,QAChDK,GAAMA,EAAEjF,IAAIsC,IAAM3B,EAAMX,IAAIsC,IAI3B4C,EAAchF,KAAKsD,MAAMlD,gBAAgBsE,QAC1CO,GAAOA,EAAGnF,IAAIsC,GAAK3B,EAAMX,IAAIsC,IAGjB0C,EAAUpD,OAASsD,EAAYtD,QAAU1B,KAAKC,KAAK8C,EAAI,GAGpE0B,EAAU/D,KAAKD,EAAMX,IAAIsC,MAIzBqC,EAAU/C,OAAS,IAErB1B,KAAKsD,MAAMjD,uBAAuBL,KAAKsD,MAAMC,kBAG7CkB,EAAUjE,SAAS0E,IACjBlF,KAAKsD,MAAMlD,gBAAkBJ,KAAKsD,MAAMlD,gBAAgBsE,QACrDC,GAAMA,EAAE7E,IAAIsC,GAAK8C,IAEpBlF,KAAKsD,MAAMlD,gBACRsE,QAAQC,GAAMA,EAAE7E,IAAIsC,EAAI8C,IACxB1E,SAASmE,GAAOA,EAAE7E,IAAIsC,GAAK,QAEzB,GAMXiB,gBAAgBf,GACd,IAAIwC,EAAY9E,KAAKsD,MAAMC,iBACvB4B,GAAW,EACXC,EAAiBC,IACfA,EAASjD,GAAKpC,KAAKC,KAAK+C,EAAI,EAC9BmC,GAAW,EAEXnF,KAAKsD,MAAMlD,gBAAgBI,SAASmE,IAC9BA,EAAE7E,IAAIqC,GAAKkD,EAASlD,GAAKwC,EAAE7E,IAAIsC,GAAKiD,EAASjD,EAAI,IACnD+C,GAAW,MAIVA,GAGLG,EAAiB,CACnBD,EACA/C,KAEW,QAAPA,EACE+C,EAASlD,GAAK,IAChBgD,GAAW,GAEG,SAAP7C,GACL+C,EAASlD,GAAKnC,KAAKC,KAAK8C,EAAI,IAC9BoC,GAAW,GAGfnF,KAAKsD,MAAMlD,gBAAgBI,SAASmE,IACvB,QAAPrC,EACEqC,EAAE7E,IAAIsC,GAAKiD,EAASjD,GAAKuC,EAAE7E,IAAIqC,GAAKkD,EAASlD,EAAI,IACnDgD,GAAW,GAEG,SAAP7C,GACLqC,EAAE7E,IAAIsC,GAAKiD,EAASjD,GAAKuC,EAAE7E,IAAIqC,GAAKkD,EAASlD,EAAI,IACnDgD,GAAW,MAKVA,GAqBT,OAlBAL,EAAUjE,MAAML,SAAO,CAAEuB,EAAKC,KAC5BD,EAAIvB,SAAO,CAAEC,EAAO8E,KAClB,GAAc,IAAV9E,EAAa,CACf,IAAI4E,EAAW,CACblD,EAAGoD,EAAST,EAAUlD,MACtBQ,EAAGJ,EAAO8C,EAAUjD,QAGX,QAAPS,GAAkBgD,EAAkBD,EAAU,WAEhC,SAAP/C,GAAmBgD,EAAkBD,EAAU,YAExC,QAAP/C,GAAkB8C,EAAcC,MAHzCF,GAAW,UASZA,EAGT1B,YACEzD,KAAK+D,IAAIyB,UAAU,EAAG,EAAGxF,KAAK4D,OAAOS,MAAOrE,KAAK4D,OAAOU,QACxDtE,KAAKiE,cAAczD,SAASmE,GAAM3E,KAAKyF,WAAWd,KAClD3E,KAAK0F,kBAGPA,kBACE1F,KAAKsD,MAAMC,iBAAiBhD,OAAOC,SAASmE,GAAM3E,KAAKyF,WAAWd,KAClE3E,KAAKsD,MAAMlD,gBAAgBI,SAASmE,GAAM3E,KAAKyF,WAAWd,KAG5Dc,WAAWhF,GACTT,KAAK+D,IAAI4B,UAAYlF,EAAMV,MAC3BC,KAAK+D,IAAI6B,SACPnF,EAAMX,IAAIqC,GAAK1B,EAAMR,KAAOQ,EAAMP,QAClCO,EAAMX,IAAIsC,GAAK3B,EAAMR,KAAOQ,EAAMP,QAClCO,EAAMR,KACNQ,EAAMR,MAIVmE,QACEV,OAAOmC,iBAAiB,SAAUC,IAChC,GAAuB,WAAnB9F,KAAKiD,WACP,OAAQ6C,EAAIC,MACV,IAAK,YACC/F,KAAKqD,gBAAgB,SACvBrD,KAAKsD,MAAMC,iBAAiBlB,KAAK,QACnCrC,KAAKyD,YACL,MACF,IAAK,aACCzD,KAAKqD,gBAAgB,UACvBrD,KAAKsD,MAAMC,iBAAiBlB,KAAK,SACnCrC,KAAKyD,YACL,MACF,IAAK,QACL,IAAK,UACHzD,KAAKsD,MAAMC,iBAAiBhB,OAAO,SACnCvC,KAAKyD,YACL,MACF,IAAK,iBACIzD,KAAKqD,gBAAgB,SAC1BrD,KAAKsD,MAAMC,iBAAiBlB,KAAK,QACnCrC,KAAKyD,mBD1NZU","sources":["src/Block.ts","src/Board.ts","src/Shapes.ts","src/Tetromino.ts","src/App.ts","src/Game.ts"],"sourcesContent":["export default class Block {\n  size = 20;\n  margin = 2;\n\n  constructor(public pos: { x: number; y: number }, public color: string) {}\n}\n","import Tetromino from \"./Tetromino\";\nimport Block from \"./Block\";\n\nexport default class Board {\n  active_tetromino: Tetromino;\n\n  constructor(public occupied_blocks: Block[] = []) {}\n\n  add_to_occupied_blocks(tetro: Tetromino) {\n    tetro.blocks.forEach((block) => {\n      this.occupied_blocks.push(block);\n    });\n  }\n}\n","let shapes= {\n  I:  {\n    shape: [\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n    color: \"#0DDCE5\"\n  },\n  J: {\n    shape: [\n      [1, 0, 0, 0],\n      [1, 1, 1, 0],\n      [0, 0, 0, 0],\n    ],\n    color: \"#1F77F7\"\n  },\n  L: {\n    shape: [\n      [0, 0, 1, 0],\n      [1, 1, 1, 0],\n      [0, 0, 0, 0],\n    ],\n    color: \"#E9800F\"\n  },\n  O: {\n    shape: [\n      [1, 1],\n      [1, 1],\n    ],\n    color: \"#F9EC23\"\n  },\n  S: {\n    shape: [\n      [0, 1, 1, 0],\n      [1, 1, 0, 0],\n      [0, 0, 0, 0],\n    ],\n    color: \"#01D705\"\n  },\n  T: {\n    shape: [\n      [0, 1, 0, 0],\n      [1, 1, 1, 0],\n      [0, 0, 0, 0],\n    ],\n    color: \"#FC59FE\"\n  },\n  Z: {\n    shape: [\n      [1, 1, 0, 0],\n      [0, 1, 1, 0],\n      [0, 0, 0, 0],\n    ],\n    color: \"#E83B40\"\n  },\n}\n\nexport default shapes;\n","import Block from \"./Block\";\nimport Shapes from \"./Shapes\";\n\nexport default class Tetromino {\n  shape: number[][];\n  color: string;\n  blocks: Block[];\n  pos_x = 4;\n  pos_y = 1;\n\n  get_random_tetro() {\n    let shapes = [\"I\", \"J\", \"L\", \"O\", \"S\", \"T\", \"Z\"];\n    return shapes[Math.floor(Math.random() * shapes.length)];\n  }\n\n  constructor(type?: string) {\n    if (!type) {\n      type = this.get_random_tetro();\n    }\n    this.shape = Shapes[type].shape;\n    this.color = Shapes[type].color;\n  }\n\n  update_tetromino() {\n    this.blocks = [];\n    this.shape.forEach((row, irow) => {\n      row.forEach((col, icol) => {\n        if (col === 1)\n          this.blocks.push(\n            new Block(\n              { x: this.pos_x + icol, y: this.pos_y + irow },\n              this.color\n            )\n          );\n      });\n    });\n  }\n\n  move(dir: \"left\" | \"right\" | \"down\") {\n    if (dir == \"left\") {\n      this.pos_x -= 1;\n    }\n    if (dir == \"right\") {\n      this.pos_x += 1;\n    }\n    if (dir == \"down\") {\n      this.pos_y += 1;\n    }\n    this.update_tetromino();\n  }\n\n  rotate(dir: \"left\" | \"right\" = \"right\") {\n    if (dir == \"left\") {\n      this.shape = this.shape.map((_x, i, s) => s.map((y) => y[i])).reverse();\n    }\n    if (dir == \"right\") {\n      this.shape = this.shape.reverse().map((_x, i, s) => s.map((_y) => _y[i]));\n    }\n    this.update_tetromino();\n  }\n}\n","import Game from \"./Game\";\n\nconst game = new Game();\ngame.start();\n","import Block from \"./Block\";\nimport Board from \"./Board\";\nimport Tetromino from \"./Tetromino\";\n\nexport default class Game {\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n  prev_time: DOMHighResTimeStamp;\n  tetrominos: Tetromino[];\n  border_blocks: Block[];\n  board: Board;\n  speed = 250;\n  size = { w: 12, h: 22 };\n  game_state: \"running\" | \"stopped\" = \"running\";\n\n  constructor() {\n    this.canvas = document.getElementById(\"Game\") as HTMLCanvasElement;\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.prev_time = 0;\n    this.border_blocks = [];\n    this.create_border(this.size.w, this.size.h);\n    this.board = new Board();\n  }\n\n  start() {\n    window.requestAnimationFrame(this.update);\n    const tetro = new Tetromino();\n    tetro.update_tetromino();\n    this.board.active_tetromino = tetro;\n    this.draw_game();\n    this.input();\n  }\n\n  update = (timestamp: DOMHighResTimeStamp) => {\n    let elapsed = timestamp - this.prev_time;\n    if (elapsed > this.speed) {\n      this.prev_time = timestamp;\n      if (this.check_collision(\"down\")) {\n        this.board.active_tetromino.move(\"down\");\n      } else {\n        if (this.board.active_tetromino.pos_y === 1) {\n          this.game_state = \"stopped\";\n        } else {\n          if (!this.contains_full_rows()) {\n            this.board.add_to_occupied_blocks(this.board.active_tetromino);\n          }\n          const tetro = new Tetromino();\n          tetro.update_tetromino();\n          this.board.active_tetromino = tetro;\n        }\n      }\n      this.draw_game();\n    }\n    if (this.game_state === \"running\")\n      window.requestAnimationFrame(this.update);\n  };\n\n  create_border(width: number, height: number) {\n    for (let ix = 0; ix < width; ix++) {\n      for (let iy = 0; iy < height; iy++) {\n        if (iy == 0 || iy == height - 1 || ix == 0 || ix == width - 1) {\n          this.border_blocks.push(new Block({ x: ix, y: iy }, \"grey\"));\n        }\n      }\n    }\n  }\n\n  contains_full_rows(): boolean {\n    let full_rows: number[] = [];\n\n    // filter out one block per row:\n    let single_block_per_row = this.board.active_tetromino.blocks.filter(\n      (b, i, o) => o.map((b) => b.pos.y).indexOf(b.pos.y) == i\n    );\n\n    // check the single block for each row:\n    single_block_per_row.forEach((block) => {\n      // count number of blocks occupied by current tetro on current row\n      let current_t = this.board.active_tetromino.blocks.filter(\n        (t) => t.pos.y === block.pos.y\n      );\n\n      // count number of other blocks\n      let current_row = this.board.occupied_blocks.filter(\n        (bb) => bb.pos.y == block.pos.y\n      );\n\n      let full_row = current_t.length + current_row.length == this.size.w - 2;\n\n      if (full_row) {\n        full_rows.push(block.pos.y);\n      }\n    });\n\n    if (full_rows.length > 0) {\n      // add current tetro so that blocks not on a full row doesn't disappear\n      this.board.add_to_occupied_blocks(this.board.active_tetromino);\n\n      // filter out full rows\n      full_rows.forEach((r) => {\n        this.board.occupied_blocks = this.board.occupied_blocks.filter(\n          (b) => b.pos.y != r\n        );\n        this.board.occupied_blocks\n          .filter((b) => b.pos.y < r)\n          .forEach((b) => (b.pos.y += 1));\n      });\n      return true;\n    }\n\n    return false;\n  }\n\n  check_collision(dir: \"down\" | \"left\" | \"right\"): boolean {\n    let current_t = this.board.active_tetromino;\n    let can_move = true;\n    let can_move_down = (blockpos: { x: number; y: number }): boolean => {\n      if (blockpos.y >= this.size.h - 2) {\n        can_move = false;\n      } else {\n        this.board.occupied_blocks.forEach((b) => {\n          if (b.pos.x == blockpos.x && b.pos.y == blockpos.y + 1) {\n            can_move = false;\n          }\n        });\n      }\n      return can_move;\n    };\n\n    let can_move_sideways = (\n      blockpos: { x: number; y: number },\n      dir: \"left\" | \"right\"\n    ): boolean => {\n      if (dir == \"left\") {\n        if (blockpos.x <= 1) {\n          can_move = false;\n        }\n      } else if (dir == \"right\") {\n        if (blockpos.x >= this.size.w - 2) {\n          can_move = false;\n        }\n      }\n      this.board.occupied_blocks.forEach((b) => {\n        if (dir == \"left\") {\n          if (b.pos.y == blockpos.y && b.pos.x == blockpos.x - 1) {\n            can_move = false;\n          }\n        } else if (dir == \"right\") {\n          if (b.pos.y == blockpos.y && b.pos.x == blockpos.x + 1) {\n            can_move = false;\n          }\n        }\n      });\n\n      return can_move;\n    };\n\n    current_t.shape.forEach((row, irow) => {\n      row.forEach((block, iblock) => {\n        if (block === 1) {\n          let blockpos = {\n            x: iblock + current_t.pos_x,\n            y: irow + current_t.pos_y,\n          };\n\n          if (dir == \"left\" && !can_move_sideways(blockpos, \"left\")) {\n            can_move = false;\n          } else if (dir == \"right\" && !can_move_sideways(blockpos, \"right\")) {\n            can_move = false;\n          } else if (dir == \"down\" && !can_move_down(blockpos)) {\n            can_move = false;\n          }\n        }\n      });\n    });\n    return can_move;\n  }\n\n  draw_game() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.border_blocks.forEach((b) => this.draw_block(b));\n    this.draw_tetrominos();\n  }\n\n  draw_tetrominos() {\n    this.board.active_tetromino.blocks.forEach((b) => this.draw_block(b));\n    this.board.occupied_blocks.forEach((b) => this.draw_block(b));\n  }\n\n  draw_block(block: Block) {\n    this.ctx.fillStyle = block.color;\n    this.ctx.fillRect(\n      block.pos.x * (block.size + block.margin),\n      block.pos.y * (block.size + block.margin),\n      block.size,\n      block.size\n    );\n  }\n\n  input() {\n    window.addEventListener(\"keyup\", (key) => {\n      if (this.game_state == \"running\") {\n        switch (key.code) {\n          case \"ArrowLeft\":\n            if (this.check_collision(\"left\"))\n              this.board.active_tetromino.move(\"left\");\n            this.draw_game();\n            break;\n          case \"ArrowRight\":\n            if (this.check_collision(\"right\"))\n              this.board.active_tetromino.move(\"right\");\n            this.draw_game();\n            break;\n          case \"Space\":\n          case \"ArrowUp\":\n            this.board.active_tetromino.rotate(\"right\");\n            this.draw_game();\n            break;\n          case \"ArrowDown\":\n            while (this.check_collision(\"down\"))\n              this.board.active_tetromino.move(\"down\");\n            this.draw_game();\n            break;\n          default:\n            break;\n        }\n      }\n    });\n  }\n}\n"],"names":["$0ac5b32afab23ecb$export$2e2bcd8739ae039","pos","color","this","size","margin","$1b0340a8652ca717$export$2e2bcd8739ae039","occupied_blocks","add_to_occupied_blocks","tetro","blocks","forEach","block","push","$3dcf3c49334a37ff$export$2e2bcd8739ae039","I","shape","J","L","O","S","T","Z","$7b052a5a6b818c76$export$2e2bcd8739ae039","get_random_tetro","shapes","Math","floor","random","length","type","pos_x","pos_y","update_tetromino","row","irow","col","icol","x","y","move","dir","rotate","map","_x","i","s","reverse","_y","speed","w","h","game_state","update","timestamp","prev_time","check_collision","board","active_tetromino","contains_full_rows","draw_game","window","requestAnimationFrame","canvas","document","getElementById","ctx","getContext","border_blocks","create_border","start","input","width","height","ix","iy","full_rows","filter","b","o","indexOf","current_t","t","current_row","bb","r","can_move","can_move_down","blockpos","can_move_sideways","iblock","clearRect","draw_block","draw_tetrominos","fillStyle","fillRect","addEventListener","key","code"],"version":3,"file":"index.a865bee2.js.map"}