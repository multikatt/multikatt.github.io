{"mappings":"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","sources":["src/Block.ts","src/Board.ts","src/Tetromino_data.ts","src/Tetromino.ts","src/App.ts","src/Game.ts"],"sourcesContent":["export default class Block {\r\n  border_block: boolean = false;\r\n  size = 20;\r\n  margin = 2;\r\n\r\n  constructor(\r\n    public pos: { x: number; y: number },\r\n    public color: string,\r\n    border_block?: boolean\r\n  ) {\r\n    if (border_block) this.border_block = border_block;\r\n  }\r\n}\r\n","import Tetromino from \"./Tetromino\";\r\nimport Block from \"./Block\";\r\n\r\nexport default class Board {\r\n  active_tetromino!: Tetromino;\r\n  next_tetromino!: Tetromino;\r\n\r\n  constructor(public occupied_blocks: Block[] = []) {}\r\n\r\n  add_to_occupied_blocks(tetro: Tetromino) {\r\n    tetro.blocks.forEach((block) => {\r\n      this.occupied_blocks.push(block);\r\n    });\r\n  }\r\n}\r\n","export const rotation_tests: {\r\n  [key: string]: {\r\n    [key: number]: {\r\n      [key: number]: number[][]\r\n    }\r\n  }\r\n} = {\r\n  nonI: {\r\n    0: {\r\n      1: [\r\n        [0, 0],\r\n        [-1, 0],\r\n        [-1, -1],\r\n        [0, 2],\r\n        [-1, 2],\r\n      ],\r\n      3: [\r\n        [0, 0],\r\n        [1, 0],\r\n        [1, -1],\r\n        [0, 2],\r\n        [1, 2],\r\n      ],\r\n    },\r\n    1: {\r\n      0: [\r\n        [0, 0],\r\n        [1, 0],\r\n        [1, 1],\r\n        [0, -2],\r\n        [1, -2],\r\n      ],\r\n      2: [\r\n        [0, 0],\r\n        [1, 0],\r\n        [1, 1],\r\n        [0, -2],\r\n        [1, -2],\r\n      ],\r\n    },\r\n    2: {\r\n      1: [\r\n        [0, 0],\r\n        [-1, 0],\r\n        [-1, -1],\r\n        [0, 2],\r\n        [-1, 2],\r\n      ],\r\n      3: [\r\n        [0, 0],\r\n        [1, 0],\r\n        [1, -1],\r\n        [0, 2],\r\n        [1, 2],\r\n      ],\r\n    },\r\n    3: {\r\n      2: [\r\n        [0, 0],\r\n        [-1, 0],\r\n        [-1, 1],\r\n        [0, -2],\r\n        [-1, -2],\r\n      ],\r\n      0: [\r\n        [0, 0],\r\n        [-1, 0],\r\n        [-1, 1],\r\n        [0, -2],\r\n        [-1, -2],\r\n      ],\r\n    },\r\n  },\r\n  I: {\r\n    0: {\r\n      1: [\r\n        [0, 0],\r\n        [-2, 0],\r\n        [1, 0],\r\n        [-2, -1],\r\n        [1, -2],\r\n      ],\r\n      3: [\r\n        [0, 0],\r\n        [-1, 0],\r\n        [2, 0],\r\n        [-1, -2],\r\n        [2, 1],\r\n      ],\r\n    },\r\n    1: {\r\n      0: [\r\n        [0, 0],\r\n        [2, 0],\r\n        [-1, 0],\r\n        [2, -1],\r\n        [-1, 2],\r\n      ],\r\n      2: [\r\n        [0, 0],\r\n        [-1, 0],\r\n        [2, 0],\r\n        [-1, 2],\r\n        [2, 1],\r\n      ],\r\n    },\r\n    2: {\r\n      1: [\r\n        [0, 0],\r\n        [1, 0],\r\n        [-2, 0],\r\n        [1, 2],\r\n        [-2, -1],\r\n      ],\r\n      3: [\r\n        [0, 0],\r\n        [2, 0],\r\n        [-1, 0],\r\n        [2, -1],\r\n        [-1, 2],\r\n      ],\r\n    },\r\n    3: {\r\n      2: [\r\n        [0, 0],\r\n        [-2, 0],\r\n        [1, 0],\r\n        [-2, 1],\r\n        [1, -2],\r\n      ],\r\n      0: [\r\n        [0, 0],\r\n        [1, 0],\r\n        [-2, 0],\r\n        [1, 2],\r\n        [-2, -1],\r\n      ],\r\n    },\r\n  },\r\n};\r\n\r\nexport const shape_data: {\r\n  [key: string]: {\r\n    [key: string]: number[][] | string\r\n  }\r\n} = {\r\n  I: {\r\n    shape: [\r\n      [0, 0, 0, 0],\r\n      [1, 1, 1, 1],\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0],\r\n    ],\r\n    color: \"#0DDCE5\",\r\n  },\r\n  J: {\r\n    shape: [\r\n      [1, 0, 0, 0],\r\n      [1, 1, 1, 0],\r\n      [0, 0, 0, 0],\r\n    ],\r\n    color: \"#1F77F7\",\r\n  },\r\n  L: {\r\n    shape: [\r\n      [0, 0, 1, 0],\r\n      [1, 1, 1, 0],\r\n      [0, 0, 0, 0],\r\n    ],\r\n    color: \"#E9800F\",\r\n  },\r\n  O: {\r\n    shape: [\r\n      [1, 1],\r\n      [1, 1],\r\n    ],\r\n    color: \"#F9EC23\",\r\n  },\r\n  S: {\r\n    shape: [\r\n      [0, 1, 1, 0],\r\n      [1, 1, 0, 0],\r\n      [0, 0, 0, 0],\r\n    ],\r\n    color: \"#01D705\",\r\n  },\r\n  T: {\r\n    shape: [\r\n      [0, 1, 0, 0],\r\n      [1, 1, 1, 0],\r\n      [0, 0, 0, 0],\r\n    ],\r\n    color: \"#FC59FE\",\r\n  },\r\n  Z: {\r\n    shape: [\r\n      [1, 1, 0, 0],\r\n      [0, 1, 1, 0],\r\n      [0, 0, 0, 0],\r\n    ],\r\n    color: \"#E83B40\",\r\n  },\r\n};\r\n","import Block from \"./Block\";\r\nimport { shape_data, rotation_tests } from \"./Tetromino_data\";\r\n\r\nexport default class Tetromino {\r\n  shape: number[][];\r\n  color: string;\r\n  blocks: Block[];\r\n  type: string;\r\n  rotation_state = 0;\r\n  pos_x = 4;\r\n  pos_y = 1;\r\n\r\n  get_random_tetro() {\r\n    let shapes = [\"I\", \"J\", \"L\", \"O\", \"S\", \"T\", \"Z\"];\r\n    return shapes[Math.floor(Math.random() * shapes.length)];\r\n  }\r\n\r\n  constructor(type?: string) {\r\n    if (!type) {\r\n      type = this.get_random_tetro();\r\n    }\r\n    this.blocks = [];\r\n    this.shape = [...shape_data[type].shape as number[][]];\r\n    this.color = shape_data[type].color as string;\r\n    this.type = type;\r\n  }\r\n\r\n  update_tetromino() {\r\n    this.blocks = [];\r\n    this.shape.forEach((row, irow) => {\r\n      row.forEach((col, icol) => {\r\n        if (col === 1)\r\n          this.blocks.push(\r\n            new Block(\r\n              { x: this.pos_x + icol, y: this.pos_y + irow },\r\n              this.color\r\n            )\r\n          );\r\n      });\r\n    });\r\n  }\r\n\r\n  move(dir: \"left\" | \"right\" | \"down\") {\r\n    if (dir == \"left\") {\r\n      this.pos_x -= 1;\r\n    }\r\n    if (dir == \"right\") {\r\n      this.pos_x += 1;\r\n    }\r\n    if (dir == \"down\") {\r\n      this.pos_y += 1;\r\n    }\r\n    this.update_tetromino();\r\n  }\r\n\r\n  rotate(dir: \"left\" | \"right\" = \"right\", occupied_blocks?: Block[]) {\r\n    let check_collision = (wanted_state: number, tmp_shape: number[][]): boolean | number[] => {\r\n      let found_solution: number[] | boolean = false;\r\n      let testtype: string;\r\n      if (this.type == \"I\") testtype = \"I\";\r\n      else testtype = \"nonI\";\r\n      rotation_tests[testtype][this.rotation_state][wanted_state].some(\r\n        (rot: number[]) => {\r\n          let found_hit = false;\r\n          tmp_shape.forEach((row, irow) => {\r\n            row.forEach((block, iblock) => {\r\n              if (block === 1) {\r\n                let blockpos = {\r\n                  x: iblock + this.pos_x,\r\n                  y: irow + this.pos_y,\r\n                };\r\n                if (occupied_blocks) {\r\n                  if (\r\n                    occupied_blocks.find(\r\n                      (b) =>\r\n                        b.pos.x == blockpos.x + rot[0] &&\r\n                        b.pos.y == blockpos.y + rot[1]\r\n                    ) != null\r\n                  ) {\r\n                    found_hit = true;\r\n                  }\r\n                }\r\n              }\r\n            });\r\n          });\r\n          if (found_hit == false) {\r\n            found_solution = rot;\r\n            return true;\r\n          }\r\n        }\r\n      );\r\n\r\n      if (found_solution) return found_solution;\r\n      else return false;\r\n    };\r\n\r\n    let wanted_state: number;\r\n    let tmp_shape: number[][];\r\n\r\n    if (dir == \"left\") {\r\n      wanted_state = (this.rotation_state + 3) % 4;\r\n      tmp_shape = this.shape.map((_x, i, s) => s.map((y) => y[i])).reverse();\r\n    }\r\n    else { // if (dir == \"right\") {\r\n      wanted_state = (this.rotation_state + 1) % 4;\r\n      tmp_shape = this.shape.reverse().map((_x, i, s) => s.map((_y) => _y[i]));\r\n    }\r\n    let found_solution = check_collision(wanted_state, tmp_shape);\r\n    if (found_solution != false && Array.isArray(found_solution)) {\r\n      this.pos_x += found_solution[0];\r\n      this.pos_y += found_solution[1];\r\n      this.shape = tmp_shape;\r\n      this.rotation_state = wanted_state;\r\n    }\r\n    this.update_tetromino();\r\n  }\r\n}\r\n","import Game from \"./Game\";\r\n\r\nconst game = new Game();\r\ngame.start();\r\n","import Block from \"./Block\";\r\nimport Board from \"./Board\";\r\nimport Tetromino from \"./Tetromino\";\r\n\r\nexport default class Game {\r\n  canvas: HTMLCanvasElement;\r\n  ctx: CanvasRenderingContext2D;\r\n  board: Board;\r\n  speed!: number;\r\n  prev_time: DOMHighResTimeStamp = 0;\r\n  score = 0;\r\n  level = 0;\r\n  total_rows_cleared = 0;\r\n  size = { w: 12, h: 22 };\r\n  game_state: \"running\" | \"stopped\" = \"running\";\r\n\r\n  constructor() {\r\n    this.set_speed();\r\n    this.canvas = document.getElementById(\"Game\") as HTMLCanvasElement;\r\n    this.ctx = this.canvas.getContext(\"2d\")!;\r\n    this.board = new Board();\r\n    this.create_border(this.size.w, this.size.h);\r\n  }\r\n\r\n  start() {\r\n    window.requestAnimationFrame(this.update);\r\n    this.spawn_tetromino();\r\n    this.draw_game();\r\n    this.input();\r\n  }\r\n\r\n  spawn_tetromino() {\r\n    this.board.active_tetromino = this.board.next_tetromino === undefined ? new Tetromino() : this.board.next_tetromino;\r\n    this.board.next_tetromino = new Tetromino();\r\n    if (this.board.next_tetromino.type == \"O\") {\r\n      this.board.next_tetromino.pos_x = 15;\r\n    } else if (this.board.next_tetromino.type == \"I\") {\r\n      this.board.next_tetromino.pos_x = 14;\r\n    } else {\r\n      this.board.next_tetromino.pos_x = 14.5;\r\n    }\r\n\r\n    this.board.next_tetromino.update_tetromino();\r\n    this.board.active_tetromino.pos_x = 4;\r\n    this.board.active_tetromino.update_tetromino();\r\n  }\r\n\r\n  update = (timestamp: DOMHighResTimeStamp) => {\r\n    let elapsed = timestamp - this.prev_time;\r\n    if (elapsed > this.speed) {\r\n      this.prev_time = timestamp;\r\n      if (this.check_collision(\"down\")) {\r\n        this.board.active_tetromino.move(\"down\");\r\n      } else {\r\n        if (this.board.active_tetromino.pos_y === 1) {\r\n          this.game_state = \"stopped\";\r\n        } else {\r\n          if (!this.contains_full_rows()) {\r\n            this.board.add_to_occupied_blocks(this.board.active_tetromino);\r\n          }\r\n          this.spawn_tetromino();\r\n        }\r\n      }\r\n\r\n      // Fixed-goal leveling:\r\n      this.level = Math.floor(this.total_rows_cleared / 10);\r\n      this.set_speed();\r\n\r\n      this.draw_game();\r\n    }\r\n    if (this.game_state === \"running\")\r\n      window.requestAnimationFrame(this.update);\r\n  };\r\n\r\n  set_speed() {\r\n    // From formula on https://harddrop.com/wiki/Tetris_Worlds\r\n    // (0.8-((Level-1)*0.007))^(Level-1)\r\n    this.speed = Math.pow((0.8 - ((this.level) * 0.007)), this.level) * 1000;\r\n  }\r\n\r\n  create_border(width: number, height: number) {\r\n    for (let ix = 0; ix < width; ix++) {\r\n      for (let iy = 0; iy < height; iy++) {\r\n        if (iy == 0 || iy == height - 1 || ix == 0 || ix == width - 1) {\r\n          this.board.occupied_blocks.push(\r\n            new Block({ x: ix, y: iy }, \"grey\", true)\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  contains_full_rows(): boolean {\r\n    let full_rows: number[] = [];\r\n\r\n    // filter out one block per row:\r\n    let single_block_per_row = this.board.active_tetromino.blocks.filter(\r\n      (b, i, o) => o.map((b) => b.pos.y).indexOf(b.pos.y) == i\r\n    );\r\n\r\n    // check the single block for each row:\r\n    single_block_per_row.forEach((block) => {\r\n      // count number of blocks occupied by current tetro on current row\r\n      let current_t = this.board.active_tetromino.blocks.filter(\r\n        (t) => t.pos.y === block.pos.y\r\n      );\r\n\r\n      // count number of other blocks\r\n      let current_row = this.board.occupied_blocks.filter(\r\n        (bb) => bb.pos.y == block.pos.y\r\n      );\r\n\r\n      let full_row = current_t.length + current_row.length == this.size.w;\r\n\r\n      if (full_row) {\r\n        full_rows.push(block.pos.y);\r\n      }\r\n    });\r\n\r\n    if (full_rows.length > 0) {\r\n      // add current tetro so that blocks not on a full row doesn't disappear\r\n      this.board.add_to_occupied_blocks(this.board.active_tetromino);\r\n\r\n      // filter out full rows\r\n      full_rows.forEach((r) => {\r\n        this.board.occupied_blocks = this.board.occupied_blocks.filter(\r\n          (b) => b.pos.y != r || b.border_block == true\r\n        );\r\n        this.board.occupied_blocks\r\n          .filter((b) => b.pos.y < r && b.border_block == false)\r\n          .forEach((b) => {\r\n            b.pos.y += 1;\r\n          });\r\n      });\r\n\r\n      // Using original Nintendo scoring system\r\n      let score_per_line = [40, 100, 300, 1200];\r\n      this.score += score_per_line[full_rows.length - 1] * (this.level + 1);\r\n\r\n      this.total_rows_cleared += full_rows.length;\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  check_collision(dir: \"down\" | \"left\" | \"right\"): boolean {\r\n    let current_t = this.board.active_tetromino;\r\n    let can_move = true;\r\n    let can_move_down = (blockpos: { x: number; y: number }): boolean => {\r\n      this.board.occupied_blocks.forEach((b) => {\r\n        if (b.pos.x == blockpos.x && b.pos.y == blockpos.y + 1) {\r\n          can_move = false;\r\n        }\r\n      });\r\n      return can_move;\r\n    };\r\n\r\n    let can_move_sideways = (\r\n      blockpos: { x: number; y: number },\r\n      dir: \"left\" | \"right\"\r\n    ): boolean => {\r\n      this.board.occupied_blocks.forEach((b) => {\r\n        if (dir == \"left\") {\r\n          if (b.pos.y == blockpos.y && b.pos.x == blockpos.x - 1) {\r\n            can_move = false;\r\n          }\r\n        } else if (dir == \"right\") {\r\n          if (b.pos.y == blockpos.y && b.pos.x == blockpos.x + 1) {\r\n            can_move = false;\r\n          }\r\n        }\r\n      });\r\n\r\n      return can_move;\r\n    };\r\n\r\n    current_t.shape.forEach((row, irow) => {\r\n      row.forEach((block, iblock) => {\r\n        if (block === 1) {\r\n          let blockpos = {\r\n            x: iblock + current_t.pos_x,\r\n            y: irow + current_t.pos_y,\r\n          };\r\n\r\n          if (dir == \"left\" && !can_move_sideways(blockpos, \"left\")) {\r\n            can_move = false;\r\n          } else if (dir == \"right\" && !can_move_sideways(blockpos, \"right\")) {\r\n            can_move = false;\r\n          } else if (dir == \"down\" && !can_move_down(blockpos)) {\r\n            can_move = false;\r\n          }\r\n        }\r\n      });\r\n    });\r\n    return can_move;\r\n  }\r\n\r\n  draw_game() {\r\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    this.draw_tetrominos();\r\n    let score_el = document.getElementById(\"Score\")!;\r\n    score_el.innerHTML = this.score.toString();\r\n    let level_el = document.getElementById(\"Level\")!;\r\n    level_el.innerHTML = this.level.toString();\r\n  }\r\n\r\n  draw_tetrominos() {\r\n    this.board.active_tetromino.blocks.forEach((b) => this.draw_block(b));\r\n    this.board.occupied_blocks.forEach((b) => this.draw_block(b));\r\n    this.board.next_tetromino.blocks.forEach((b) => this.draw_block(b));\r\n  }\r\n\r\n  draw_block(block: Block) {\r\n    this.ctx.fillStyle = block.color;\r\n    this.ctx.fillRect(\r\n      block.pos.x * (block.size + block.margin),\r\n      block.pos.y * (block.size + block.margin),\r\n      block.size,\r\n      block.size\r\n    );\r\n  }\r\n\r\n  input() {\r\n    window.addEventListener(\"keyup\", (key) => {\r\n      if (this.game_state == \"running\") {\r\n        switch (key.code) {\r\n          case \"ArrowLeft\":\r\n            if (this.check_collision(\"left\"))\r\n              this.board.active_tetromino.move(\"left\");\r\n            this.draw_game();\r\n            break;\r\n          case \"ArrowRight\":\r\n            if (this.check_collision(\"right\"))\r\n              this.board.active_tetromino.move(\"right\");\r\n            this.draw_game();\r\n            break;\r\n          case \"Space\":\r\n          case \"ArrowUp\":\r\n          case \"KeyX\":\r\n            this.board.active_tetromino.rotate(\r\n              \"right\",\r\n              this.board.occupied_blocks\r\n            );\r\n            this.draw_game();\r\n            break;\r\n          case \"KeyZ\":\r\n            this.board.active_tetromino.rotate(\r\n              \"left\",\r\n              this.board.occupied_blocks\r\n            );\r\n            this.draw_game();\r\n            break;\r\n          case \"ArrowDown\":\r\n            while (this.check_collision(\"down\"))\r\n              this.board.active_tetromino.move(\"down\");\r\n            this.draw_game();\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n"],"names":["$0ac5b32afab23ecb$export$2e2bcd8739ae039","pos","color","border_block","this","size","margin","$1b0340a8652ca717$export$2e2bcd8739ae039","occupied_blocks","add_to_occupied_blocks","tetro","blocks","forEach","block","push","$204a7b54b1302ed3$export$65ebdd9423950068","nonI","I","$204a7b54b1302ed3$export$82ed93702dcb4c52","shape","J","L","O","S","T","Z","$7b052a5a6b818c76$export$2e2bcd8739ae039","get_random_tetro","shapes","Math","floor","random","length","type","rotation_state","pos_x","pos_y","update_tetromino","row","irow","col","icol","x","y","move","dir","rotate","wanted_state","tmp_shape","map","_x","i","s","reverse","_y","found_solution","testtype","some","rot","found_hit","iblock","blockpos","find","b","check_collision","Array","isArray","prev_time","score","level","total_rows_cleared","w","h","game_state","update","timestamp","speed","board","active_tetromino","contains_full_rows","spawn_tetromino","set_speed","draw_game","window","requestAnimationFrame","canvas","document","getElementById","ctx","getContext","create_border","start","input","undefined","next_tetromino","pow","width","height","ix","iy","full_rows","filter","o","indexOf","current_t","t","current_row","bb","r","score_per_line","can_move","can_move_down","can_move_sideways","clearRect","draw_tetrominos","innerHTML","toString","draw_block","fillStyle","fillRect","addEventListener","key","code"],"version":3,"file":"index.c8f7a945.js.map"}